/*
 * CAN_driver.h
 *
 *  Created on: May 2, 2022
 *      Author: tsucasa-u
 *
 *  Document: https://www.analog.com/media/jp/technical-documentation/application-notes/an-1123_jp.pdf
 *  		  https://cdn.vector.com/cms/content/know-how/VJ/PDF/For_Beginners_CAN_CANFD.pdf
 */

#define __weak   __attribute__((weak))

#ifndef INC_CAN_HANDLER_1_H_
#define INC_CAN_HANDLER_1_H_

#define CAN_STANDARD_DATA_FRAME		1 << 0
#define CAN_STANDARD_REMOTE_FRAME	1 << 1
#define CAN_EXTENDED_DATA_FRAME		1 << 2
#define CAN_EXTENDED_REMOTE_FRAME	1 << 3
#define CAN_ERROR_FRAME				1 << 4

#define CRC_15_CAN		0b1100010110011001
#define __CRC_15_CAN	0b100010110011001

#define CAN_EOF_ERROR			8
#define CAN_STUFF_ERROR			7
#define CAN_BIT_ERROR			6
#define CAN_ACK_DELIMITER_ERROR	5
#define CAN_ACK_ERROR			4
#define CAN_CRC_DELIMITER_ERROR	3
#define CAN_CRC_ERROR			2
#define CAN_ARBITRATION_ERROR	1
#define CAN_NO_ERROR			0
#define CAN_NORMAL				0
#define CAN_LISTENING			-1
#define CAN_UNIDENTIFY			-2
#define CAN_ARBITRATION_PASSED	-3
#define CAN_ITM					-4

#define CAN_ERROR_ACTIVE		0
#define CAN_ERROR_PASSIVE		7
#define CAN_BUS_OFF				8

typedef struct
{
  uint8_t mode;
  uint8_t data[8];
  uint32_t std_id;
  uint32_t exd_id;
  uint8_t dlc;
  uint8_t rtr;
  uint8_t ide;
  uint8_t pb0;
  uint8_t pb1;
  uint8_t srr;
  uint16_t crc;
  uint8_t ack;
}CAN_MsgTypeDef;

typedef struct __CAN_HandleTypeDef
{
  TIM_HandleTypeDef	*Instance;
  CAN_MsgTypeDef	Msg;
  CAN_MsgTypeDef	Saved;

  uint32_t TxD;
  uint32_t RxD;
  uint32_t TxD_Port;
  uint32_t RxD_Port;
  uint32_t bits[16];
  uint32_t buf;
  uint8_t ack_iterator;
  uint8_t error;
  uint8_t state;
  uint8_t error_state;
  uint8_t msg_state;
  int16_t txd_error_counter;
  int16_t rxd_error_counter;
  int16_t resetter;
  uint8_t iterator;
  uint8_t stuff_count;
  uint8_t stuff_bit;
  uint8_t itm;
  uint8_t overload;
  uint8_t abort;
  uint32_t std_id;
  uint32_t exd_id;


  void (*CAN_switch_func_ptr)(struct __CAN_HandleTypeDef *hcan, uint8_t buffer);

}CAN_HandleTypeDef;

void MX_CAN1_Init(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim);
void CAN_IT(CAN_HandleTypeDef *hcan);
void CAN_Set_Msg_Selector(CAN_HandleTypeDef *hcan, uint32_t std_mask);
void CAN_Set_Msg_Selector(CAN_HandleTypeDef *hcan, uint32_t std_mask, uint32_t exd_mask);
void CAN_Set_Msg_ID(CAN_HandleTypeDef *hcan, uint32_t std_id);
void CAN_Set_Msg_ID(CAN_HandleTypeDef *hcan, uint32_t std_id, uint32_t exd_id);
void CAN_Set_OverLoad(CAN_HandleTypeDef *hcan, uint8_t flag);
void CAN_Error_State(CAN_HandleTypeDef *hcan);
int CAN_Write(CAN_HandleTypeDef *hcan, uint8_t len, int mode);
int CAN_Write(CAN_HandleTypeDef *hcan, uint8_t len, int mode, uint32_t std_id);
int CAN_Write(CAN_HandleTypeDef *hcan, uint8_t len, int mode, uint32_t STANDARD_IDENTIFIER, uint32_t EXTENDED_IDENTIFIER);
int CAN_Write(CAN_HandleTypeDef *hcan, uint8_t *buffer, int mode);
int CAN_Write(CAN_HandleTypeDef *hcan, uint8_t *buffer, int mode, uint32_t std_id);
int CAN_Write(CAN_HandleTypeDef *hcan, uint8_t *buffer, int mode, uint32_t STANDARD_IDENTIFIER, uint32_t EXTENDED_IDENTIFIER);
void CAN_send(CAN_HandleTypeDef *hcan);
void CAN_Insert_Stuff_Bit(uint32_t *buffer);
int CAN_CRC_Check(uint32_t *buffer);
void __CAN_Error_frame(CAN_HandleTypeDef *hcan, uint8_t buffer);
void __CAN_Arbitration_Field_std(CAN_HandleTypeDef *hcan, uint8_t buffer);
void __CAN_Arbitration_Field_exd(CAN_HandleTypeDef *hcan, uint8_t buffer);
void __CAN_DLC_Field(CAN_HandleTypeDef *hcan, uint8_t buffer);
void __CAN_Data_Field(CAN_HandleTypeDef *hcan, uint8_t buffer);
void __CAN_CRC_Field(CAN_HandleTypeDef *hcan, uint8_t buffer);
void __CAN_ACK(CAN_HandleTypeDef *hcan, uint8_t buffer);
void __CAN_EOF(CAN_HandleTypeDef *hcan, uint8_t buffer);
void __CAN_ITM(CAN_HandleTypeDef *hcan, uint8_t buffer);
void __CAN_Abort(CAN_HandleTypeDef *hcan, uint8_t buffer);
void CAN_listen(CAN_HandleTypeDef *hcan);
int CAN_Read(CAN_HandleTypeDef *hcan, uint8_t *msg);


void CAN_Receive_IT(struct __CAN_HandleTypeDef *hcan);
void CAN_Transmit_IT(struct __CAN_HandleTypeDef *hcan);
void CAN_Error_IT(struct __CAN_HandleTypeDef *hcan);
void CAN_Abort(struct __CAN_HandleTypeDef *hcan);


void CAN_TxCpltCallback(struct __CAN_HandleTypeDef *hcan);
void CAN_RxCpltCallback(struct __CAN_HandleTypeDef *hcan);
void CAN_ErrorCallback(struct __CAN_HandleTypeDef *hcan);

#endif /* INC_CAN_HANDLER_1_H_ */
