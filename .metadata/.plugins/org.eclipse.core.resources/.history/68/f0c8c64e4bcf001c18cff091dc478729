/*
 * CAN_handler.c
 *
 *  Created on: May 2, 2022
 *      Author: tsucasa-u
 */

extern TIM_HandleTypeDef htim3;
extern CAN_HandleTypeDef hcan1;

#include <string.h>
#include "CAN_handler.h"

static void MX_CAN1_Init(void)
{

  TIM_HandleTypeDef htim = htim3;

  if (htim3 == NULL)
  {
		Error_Handler();
  }

  hcan1.Instance = htim;

  hcan1.TxD = TxD_Pin;
  hcan1.RxD = RxD_Pin;

  hcan1.bits[0] = 0x01;
  hcan1.buf = 0x01;
  hcan1.iterator = 0;
  hcan1.error = 0;
  hcan1.state = 0;
  hcan1.error_state = 0;
  hcan1.msg_state = 0;

  hcan1.stuff_count = 0;
  hcan1.stuff_bit = 0;

  hcan1.itm = 2;
  hcan1.overload = 0;
  hcan1.abort = 0;
  hcan1.resetter = 0;

  HAL_TIM_Base_Start_IT(&htim);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
    if (htim == &htim3) CAN_IT(hcan1);
}

void CAN_IT(CAN_HandleTypeDef *hcan)
{
	HAL_GPIO_WritePin(hcan->TxD_Port, hcan1->TxD, GPIO_PIN_SET);
	if (hcan->state <= CAN_UNIDENTIFY) {
		CAN_send(hcan);
	} else {
		CAN_listen(hcan);
	}
	CAN_Error_State(hcan);
}

void CAN_Set_Msg_ID(CAN_HandleTypeDef *hcan, uint32_t std_id)
{
	hcan->Msg.std_id = std_id;
	hcan->Msg.exd_id = 0xFF;
}

void CAN_Set_Msg_ID(CAN_HandleTypeDef *hcan, uint32_t std_id, uint32_t exd_id)
{
	hcan->Msg.std_id = std_id;
	hcan->Msg.exd_id = exd_id;
}

void CAN_Set_OverLoad(CAN_HandleTypeDef *hcan, uint8_t flag)
{
	hcan->overload = flag;
}

void CAN_Error_State(CAN_HandleTypeDef *hcan)
{
	if (hcan->txd_error_counter>=256) {
		hcan->error_state = CAN_BUS_OFF;
		return;
	} else if (hcan->txd_error_counter>=128 || hcan->rxd_error_counter>=128) {
		hcan->error_state = CAN_ERROR_PASSIVE;
	} else {
		hcan->error_state = CAN_ERROR_ACTIVE;
		if (hcan->txd_error_counter < 0) hcan->txd_error_counter = 0;
		if (hcan->rxd_error_counter < 0) hcan->rxd_error_counter = 0;
	}
}

int CAN_Write(CAN_HandleTypeDef *hcan, uint8_t len, int mode)
{
	return CAN_Write(hcan, len, mode, hcan->std_id);
}

int CAN_Write(CAN_HandleTypeDef *hcan, uint8_t len, int mode, uint32_t std_id)
{
	return CAN_Write(hcan, len, mode, std_id, hcan->exd_id);
}

int CAN_Write(CAN_HandleTypeDef *hcan, uint8_t len, int mode, uint32_t STANDARD_IDENTIFIER, uint32_t EXTENDED_IDENTIFIER)
{
	if (hcan->error_state == CAN_BUS_OFF) return 1 << CAN_BUS_OFF;
	int i = 0;
	if (mode == CAN_STANDARD_REMOTE_FRAME) {
		hcan->bits[i++] = (0b0 << 31) | (STANDARD_IDENTIFIER << 20) | (0b100 << 17) | (len << 13) | (0b1 << 12);
		hcan->bits[i  ] = 0b1 << 31;
		hcan->bits[i++] = (CAN_CRC_Check(hcan->bits) << 17) | (0b11 << 15);
		hcan->bits[i  ] = 0b11 << 30;
		hcan->bits[i++] = (0b11111111 << 24) | (0b1 << 21);
		hcan->bits[i  ] = 0b1 << 31;
		hcan->ack_iterator = 3 ;
	} else if (mode == CAN_EXTENDED_REMOTE_FRAME) {
		hcan->bits[i++] = (0b0 << 31) | (STANDARD_IDENTIFIER << 20) | (0b11 << 18) | (0b1 << 19);
		hcan->bits[i++] = (EXTENDED_IDENTIFIER << 14) | (0b000 << 11) | ((len & 0b1111) << 7) | (0b1 << 6);
		hcan->bits[i  ] = 0b1 << 31;
		hcan->bits[i++] = (CAN_CRC_Check(hcan->bits) << 17) | (0b11 << 15);
		hcan->bits[i  ] = 0b11 << 30;
		hcan->bits[i++] = (0b11111111 << 24) | (0b1 << 21);
		hcan->bits[i  ] = 0b1 << 31;
		hcan->ack_iterator = 4;
	} else {
		Error_Handler();
	}

	CAN_Insert_Stuff_Bit(hcan->bitsBuffer);

	GPIO_PinState state = HAL_GPIO_ReadPin(hcan->RxD_Port, hcan->RxD);
	if (hcan->state == CAN_LISTENING) return hcan->state;

	hcan->state = CAN_UNIDENTIFY;
	hcan->error = CAN_NO_ERROR;
	hcan->iterator = 0;
	hcan->buf = hcan->bits[hcan->iterator];

	while(hcan->state <= CAN_UNIDENTIFY) HAL_delay(1);
	return hcan->state;
}


int CAN_Write(CAN_HandleTypeDef *hcan, uint8_t *buffer, int mode)
{
	return CAN_Write(hcan, buffer, mode, hcan->std_id);
}

int CAN_Write(CAN_HandleTypeDef *hcan, uint8_t *buffer, int mode, uint32_t std_id)
{
	return CAN_Write(hcan, buffer, mode, std_id, hcan->exd_id);
}

int CAN_Write(CAN_HandleTypeDef *hcan, uint8_t *buffer, int mode, uint32_t STANDARD_IDENTIFIER, uint32_t EXTENDED_IDENTIFIER)
{
	if (hcan->error_state == CAN_BUS_OFF) return 1 << CAN_BUS_OFF;
	int i = 0;
	if (mode == CAN_STANDARD_DATA_FRAME) {
		hcan->bits[i++] = (0b0 << 31) | (STANDARD_IDENTIFIER << 20) | (0b000 << 17) | (strlen(buffer) << 13) | (0b1 << 12);
		for(int j = 0; j < strlen(buffer); j++) hcan->bits[i++] = (buffer[j] << 24) | (0b1 << 23);
		hcan->bits[i  ] = 0b1 << 31;
		hcan->bits[i++] = (CAN_CRC_Check(hcan->bits) << 17) | (0b11 << 15);
		hcan->bits[i  ] = 0b11 << 30;
		hcan->bits[i++] = (0b11111111 << 24) | (0b1 << 21);
		hcan->bits[i  ] = 0b1 << 31;
		hcan->ack_iterator = 3 + strlen(buffer);
	} else if (mode == CAN_EXTENDED_DATA_FRAME) {
		hcan->bits[i++] = (0b0 << 31) | (STANDARD_IDENTIFIER << 20) | (0b11 << 18) | (0b1 << 19);
		hcan->bits[i++] = (EXTENDED_IDENTIFIER << 14) | (0b000 << 11) | (strlen(buffer) << 7) | (0b1 << 6);
		for(int j = 0; j < strlen(buffer); j++) hcan->bits[i++] = (buffer[j] << 24) | (0b1 << 23);
		hcan->bits[i  ] = 0b1 << 31;
		hcan->bits[i++] = (CAN_CRC_Check(hcan->bits) << 17) | (0b11 << 15);
		hcan->bits[i  ] = 0b11 << 30;
		hcan->bits[i++] = (0b11111111 << 24) | (0b1 << 21);
		hcan->bits[i  ] = 0b1 << 31;
		hcan->ack_iterator = 4 + strlen(buffer);
	} else {
		Error_Handler();
	}

	CAN_Insert_Stuff_Bit(hcan->bitsBuffer);

	GPIO_PinState state = HAL_GPIO_ReadPin(hcan->RxD_Port, hcan->RxD);
	if (hcan->state == CAN_LISTENING) return hcan->state;

	hcan->state = CAN_UNIDENTIFY;
	hcan->error = CAN_NO_ERROR;
	hcan->iterator = 0;
	hcan->buf = hcan->bits[hcan->iterator];

	while(hcan->state <= CAN_UNIDENTIFY) HAL_delay(1);

	hcan->iterator = 1;
	return hcan->state;
}

void CAN_send(CAN_HandleTypeDef *hcan)
{
	if (hcan->error > 0) __CAN_Error_frame(hcan, 0);

	if(hcan->state == CAN_UNIDENTIFY) {
		GPIO_PinState state = HAL_GPIO_ReadPin(hcan->RxD_Port, hcan->RxD);
		if (state == 0 && hcan->buf >> 31 == 1) {
			hcan->error = CAN_ARBITRATION_ERROR;
			hcan->state = CAN_NORMAL;
			return;
		} else if (state == 1 && hcan->buf >> 31 == 0) {
			hcan->state = CAN_ARBITRATION_PASSED;
		}
	}

	HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, hcan->buf >> 31);
	GPIO_PinState state = HAL_GPIO_ReadPin(hcan->RxD_Port, hcan->RxD);
	if (hcan->state == CAN_ITM) __CAN_ITM(hcan, state);
	if (hcan->ack_iterator == hcan->iterator) {
		if (state == GPIO_PIN_SET) hcan->error = CAN_ACK_ERROR;
	}
	if (hcan->buf >> 31 == state) {
		hcan->buf << 1;
		if (hcan->buf == 0b1 << 31) {
			hcan->buf = hcan->bits[++hcan->iterator];
			if (hcan->buf == 0b1 << 31) {
				hcan->txd_error_counter--;
				hcan->state = CAN_ITM;
			}
		}
	} else {
		hcan->error = CAN_BIT_ERROR;
	}
}

void CAN_Insert_Stuff_Bit(uint32_t *buffer)
{
	int i = 0;
	int j = 5;
	uint32_t buf = (buffer[i] >> 27) & 0b11111;
	uint32_t temp = buffer[i] << 27;

	while(1) {
		if (buf == 0b11111 || buf == 0b00000) {
			uint8_t flag = buf == 0b00000 ? 1 : 0;
			uint32_t mask = 0xFFFFFFFF >> j;
			buffer[i] = (buffer[i] & (!mask)) | (flag << (31 - j)) | ((buffer[i] & mask) >> 1);
			j++;
		}
		buf <<= 1;
		j++;
		buf |= temp & (0b1 << 31);
		temp <<= 1;
		if (temp == 0b1 << 31) {
			temp = buffer[++i];
			j = 0;
			if (temp == 0b1 << 31) break;
		}
	}
}

int CAN_CRC_Check(uint32_t *buffer)
{

	int i = 0;
	uint32_t buf = (buffer[i] >> 16) & 0b1111111111111111;
	uint32_t temp = buffer[i] << 16;

	while(1) {
		if (buf & 0b1000000000000000) {
			buf &= 0b111111111111111;
			buf ^= __CRC_15_CAN;
		}
		buf <<= 1;
		buf |= temp & (0b1 << 31);
		temp <<= 1;
		if (temp == 0b1 << 31) {
			temp = buffer[++i];
			if (temp == 0b1 << 31) break;
		}
	}
	buf &= 0b111111111111111;
	buf ^= __CRC_15_CAN;

	return buf & 0b111111111111111;
}

void __CAN_Error_frame(CAN_HandleTypeDef *hcan, uint8_t buffer)
{
	if (hcan->iterator <= 6) {
		HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_RESET);
	} else if (hcan->iterator <= 13 + (hcan->stuff_bit == GPIO_PIN_RESET ? 6 - hcan->stuff_count: 6)) {
		HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_SET);
	} else if (hcan->itm < 2) {
		__CAN_ITM(hcan, buffer);
	} else {
		if (hcan->state == CAN_UNIDENTIFY) {
			hcan->txd_error_counter += 8;
		} else if (hcan->state == CAN_LISTENING) {
			if (hcan->error == CAN_CRC_ERROR) {
				hcan->rxd_error_counter += 8;
			} else {
				hcan->rxd_error_counter++;
			}
		}
		__CAN_ITM(hcan, buffer);
	}
	hcan->iterator++;
}

void __CAN_Arbitration_Field_std(CAN_HandleTypeDef *hcan, uint8_t buffer)
{
	if (hcan->iterator <= 11) {
		hcan->Msg.std_id <<= 1;
		hcan->Msg.std_id |= buffer;
	} else if (hcan->iterator == 12) {
		hcan->Msg.rtr = buffer;
	} else if (hcan->iterator == 13) {
		hcan->Msg.ide = buffer;
		if (buffer) {
			hcan->CAN_switch_func_ptr = &__CAN_Arbitration_Field_exd;
			hcan->iterator = 0;
		} else {
			if(hcan->Msg.rtr) {
				hcan->Msg.mode = CAN_STANDARD_REMOTE_FRAME;
			} else {
				hcan->Msg.mode = CAN_STANDARD_DATA_FRAME;
			}
		}
	} else {
		hcan->Msg.pb0 = buffer;
		hcan->CAN_switch_func_ptr = &__CAN_DLC_Field;
		hcan->iterator = 0;
	}
	hcan->iterator++;
}

void __CAN_Arbitration_Field_exd(CAN_HandleTypeDef *hcan, uint8_t buffer)
{
	if (hcan->iterator <= 18) {
		hcan->Msg.exd_id <<= 1;
		hcan->Msg.exd_id |= buffer;
	} else if (hcan->iterator == 19) {
		hcan->Msg.srr = hcan->Msg.rtr;
		hcan->Msg.rtr = buffer;
		if(buffer) {
			hcan->Msg.mode = CAN_EXTENDED_REMOTE_FRAME;
		} else {
			hcan->Msg.mode = CAN_ERROR_FRAME;
		}
	} else if (hcan->iterator == 20) {
		hcan->Msg.pb1 = buffer;
	} else {
		hcan->Msg.pb0 = buffer;
		hcan->CAN_switch_func_ptr = &__CAN_DLC_Field;
		hcan->iterator = 0;
	}
	hcan->iterator++;
}

void __CAN_DLC_Field(CAN_HandleTypeDef *hcan, uint8_t buffer)
{
	hcan->Msg.dlc <<= 1;
	hcan->Msg.dlc |= buffer;
	if (hcan->iterator == 1) {
		if (hcan->Msg.std_mask & hcan->Msg.std_id != hcan->Msg.std_mask) {
			hcan->abort = 1;
			hcan->iterator = 0;
			hcan->CAN_switch_func_ptr = &__CAN_Abort;
			return;
		}
		if (hcan->mode == CAN_EXTENDED_DATA_FRAME || hcan->mode == CAN_EXTENDED_REMOTE_FRAME) {
			if (hcan->Msg.exd_mask & hcan->Msg.exd_id != hcan->Msg.exd_mask) {
				hcan->abort = 1;
				hcan->iterator = 0;
				hcan->CAN_switch_func_ptr = &__CAN_Abort;
				return;
			}
		}
	} else if (hcan->iterator == 4) {
		hcan->iterator = 0;
		if (hcan->Msg.mode == CAN_STANDARD_DATA_FRAME || hcan->Msg.mode == CAN_EXTENDED_DATA_FRAME) {
			hcan->CAN_switch_func_ptr = &__CAN_Data_Field;
			return;
		} else {
			hcan->CAN_switch_func_ptr = &__CAN_CRC_Field;
		}
	}
	hcan->iterator++;
}

void __CAN_Data_Field(CAN_HandleTypeDef *hcan, uint8_t buffer)
{
	if (hcan->iterator < hcan->Msg.dlc*8 - 1) {
		hcan->Msg.data[hcan->iterator/8] <<= 1;
		hcan->Msg.data[hcan->iterator/8] |= buffer;
	} else {
		hcan->CAN_switch_func_ptr = &__CAN_CRC_Field;
		hcan->iterator = 0;
	}
	hcan->iterator++;
}

void __CAN_CRC_Field(CAN_HandleTypeDef *hcan, uint8_t buffer)
{
	if (hcan->iterator <= 15) {
		hcan->Msg.crc <<= 1;
		hcan->Msg.crc |= buffer;
	} else {
		uint32_t temp[16];
		int i = 0;
		switch (hcan->Msg.mode) {
		case CAN_EXTENDED_DATA_FRAME:
			temp[i++] = (0b0 << 31) | (hcan->Msg.std_id << 20) | (0b000 << 17) | (hcan->Msg.dlc << 13) | (0b1 << 12);
			for(int j = 0; j < hcan->Msg.dlc; j++) temp[i++] = (hcan->msg.data[j] << 24) | (0b1 << 23);
			temp[i++] = (hcan->Msg.crc << 17) | (0b1 << 16);
			temp[i  ] = 0b1 << 31;
			break;
		case CAN_STANDARD_REMOTE_FRAME:
			temp[i++] = (0b0 << 31) | (hcan->Msg.std_id << 20) | (0b100 << 17) | (hcan->Msg.dlc << 13) | (0b1 << 12);
			temp[i++] = (hcan->Msg.crc << 17) | (0b1 << 16);
			temp[i  ] = 0b1 << 31;
			break;
		case CAN_EXTENDED_DATA_FRAME:
			temp[i++] = (0b0 << 31) | (hcan->Msg.std_id << 20) | (0b11 << 18) | (0b1 << 19);
			temp[i++] = (hcan->Msg.exd_id << 14) | (0b000 << 11) | (hcan->Msg.dlc << 7) | (0b1 << 6);
			for(int j = 0; j < hcan->Msg.dlc; j++) temp[i++] = (hcan->msg.data[j] << 24) | (0b1 << 23);
			temp[i++] = (hcan->Msg.crc << 17) | (0b1 << 16);
			temp[i  ] = 0b1 << 31;
			break;
		case CAN_EXTENDED_REMOTE_FRAME:
			temp[i++] = (0b0 << 31) | (hcan->Msg.std_id << 20) | (0b11 << 18) | (0b1 << 19);
			temp[i++] = (hcan->Msg.exd_id << 14) | (0b100 << 11) | (hcan->Msg.dlc << 7) | (0b1 << 6);
			temp[i++] = (hcan->Msg.crc << 17) | (0b1 << 16);
			temp[i  ] = 0b1 << 31;
			break;
		}
		if (CAN_CRC_Check(temp) != 0) {
			hcan->error = CAN_CRC_ERROR;
			hcan->Msg.ack = GPIO_PIN_SET;
		} else if (hcan->stuff_bit == GPIO_PIN_RESET) {
			hcan->error = CAN_CRC_DELIMITER_ERROR;
			hcan->Msg.ack = GPIO_PIN_SET;
		} else {
			hcan->Msg.ack = GPIO_PIN_RESET;
		}
		hcan->CAN_switch_func_ptr = &__CAN_ACK;
		hcan->iterator = 0;
	}
	hcan->iterator++;
}

void __CAN_ACK(CAN_HandleTypeDef *hcan, uint8_t buffer)
{
	if (hcan->iterator == 1) {
		HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, hcan->Msg.ack);
	} else {
		if (hcan->Msg.ack == GPIO_PIN_SET) {
			hcan->error = CAN_ACK_DELIMITER_ERROR;
			hcan->CAN_switch_func_ptr = &__CAN_Error_frame;
		} else if (hcan->stuff_bit == GPIO_PIN_RESET) {
			hcan->error = CAN_ACK_DELIMITER_ERROR;
			hcan->CAN_switch_func_ptr = &__CAN_Error_frame;
		} else {
			hcan->CAN_switch_func_ptr = &__CAN_EOF;
		}
		hcan->iterator = 0;
	}
	hcan->iterator++;
}

void __CAN_EOF(CAN_HandleTypeDef *hcan, uint8_t buffer)
{
	if (hcan->stuff_bit == GPIO_PIN_RESET) {
		hcan->error = CAN_EOF_ERROR;
		hcan->CAN_switch_func_ptr = &__CAN_Error_frame;
		hcan->iterator = 0;
	} else if (hcan->iterator == 7) {
		hcan->CAN_switch_func_ptr = &__CAN_ITM;
		hcan->iterator = 0;
		memcpy(&(hcan->Saved), &(hcan->Msg), sizeof(CAN_MsgTypeDef));
		hcan->msg_state = 1;
		hcan->rxd_error_counter--;
	}
	hcan->iterator++;
}

void __CAN_ITM(CAN_HandleTypeDef *hcan, uint8_t buffer)
{
	if (hcan->iterator == 1) {
		if (hcan->state == CAN_LISTENING) {
			hcan->itm = buffer == 0 ? 1 : 0;
		} else if (hcan->state == CAN_ITM) {
			hcan->state = CAN_ITM;
			HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_RESET);
			hcan->itm = 2;
		}
	} else {
		if (hcan->itm == 1) {
			if (hcan->iterator <= 7) {
				HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_RESET);
			} else if (hcan->iterator <= 15) {
				HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_SET);
			} else if (hcan->iterator < 18) {
				HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_SET);
			} else if (hcan->state == CAN_ITM && hcan->error_state == CAN_ERROR_PASSIVE && hcan->iterator < 26) {
				HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_SET);
			} else {
				HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_SET);
				hcan->CAN_switch_func_ptr = &__CAN_Arbitration_Field_std;
				hcan->iterator = 0;
				hcan->state = CAN_NORMAL;
				hcan->itm = 2;
			}
		} else if(hcan->itm == 0) {
			if (hcan->iterator < 3) {
				HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_SET);
			} else {
				HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_SET);
				hcan->CAN_switch_func_ptr = &__CAN_Arbitration_Field_std;
				hcan->iterator = 0;
				hcan->state = CAN_NORMAL;
				hcan->itm = 2;
			}
		} else {
			if (hcan->iterator <= 6) {
				HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_RESET);
			} else if (hcan->iterator == 7) {
				if (HAL_GPIO_WritePin(hcan->RxD_Port, hcan->RxD) == GPIO_PIN_RESET) {
					hcan->itm = 1;
				}
			} else if (hcan->iterator <= 14) {
				HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_SET);
			} else if (hcan->iterator < 17) {
				HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_SET);
			} else if (hcan->error_state == CAN_ERROR_PASSIVE && hcan->iterator < 25) {
				HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_SET);
			} else {
				HAL_GPIO_WritePin(hcan->TxD_Port, hcan->TxD, GPIO_PIN_SET);
				hcan->CAN_switch_func_ptr = &__CAN_Arbitration_Field_std;
				hcan->iterator = 0;
				hcan->state = CAN_NORMAL;
			}
		}
	}
	hcan->iterator++;
}

void __CAN_Abort(CAN_HandleTypeDef *hcan, uint8_t buffer)
{
	if (buffer == GPIO_PIN_SET) {
		hcan->iterator++;
	} else {
		hcan->iterator = 0;
	}
	if (hcan->iterator == 11) {
		hcan->abort = 0;
		hcan->CAN_switch_func_ptr = &__CAN_Arbitration_Field_std;
		hcan->iterator = 0;
		hcan->state = CAN_NORMAL;
	}
}

void CAN_listen(CAN_HandleTypeDef *hcan)
{

	GPIO_PinState state = HAL_GPIO_ReadPin(hcan->RxD_Port, hcan->RxD);
	if (hcan->error_state == CAN_BUS_OFF) {
		if (state == GPIO_PIN_SET) {
			hcan->resetter++;
			if (hcan->resetter >= 11*128 - 1) {
				hcan->error_state = CAN_ERROR_PASSIVE;
				hcan->resetter = 0;
			}
		} else {
			hcan->resetter /= 11;
		}
		return;
	}
	if (hcan->state == CAN_NORMAL) {
		if (state == GPIO_PIN_SET) {
			hcan->state = CAN_LISTENING;
			hcan->iterator = 1;
			hcan->stuff_count = 1;
			hcan->stuff_bit = state;
		}
	} else if (hcan->state == CAN_LISTENING) {
		if (!(hcan->stuff_count == 5 && state != hcan->stuff_bit)) *(hcan->CAN_switch_func_ptr)(hcan, state);
		if (hcan->abort == 0) {
			if (hcan->stuff_count < 6) {
				if (state == hcan->stuff_bit) {
					hcan->stuff_count++;
				} else {
					hcan->stuff_count = 1;
					hcan->stuff_bit = state;
				}
			} else {
				if (hcan->CAN_switch_func_ptr != &__CAN_ACK && !(hcan->CAN_switch_func_ptr == &__CAN_CRC_Field && hcan->iterator == 16) && hcan->CAN_switch_func_ptr == __CAN_ITM) {
					hcan->error = CAN_STUFF_ERROR;
					hcan->CAN_switch_func_ptr = &__CAN_Error_frame;
				}
			}
		}
	}
}

int CAN_Read(CAN_HandleTypeDef *hcan, uint8_t *msg)
{
	if (hcan->state == CAN_NORMAL) {
		if (hcan->msg_state == 1) {
			memcpy(msg, &(hcan->Saved.data), 8);
			hcan->msg_state = 0;
			return 1;
		} else if (hcan->msg_state == 0) {
			return 0;
		}
	} else {
		return -1;
	}
}

__weak int CAN_Msg_Selector(CAN_HandleTypeDef *hcan)
{
	/*
	 * Return 1 or 0. Return 1 if you want to get message and return 0 if you want to abort message.
	 * This function is called when process message id
	 * message id is contained at hcan->Msg.std_id and hcan->Msg.exd_id
	 */
	return 1;
}

void CAN_Receive_IT(struct __CAN_HandleTypeDef *hcan) {};
void CAN_Transmit_IT(struct __CAN_HandleTypeDef *hcan) {};
void CAN_Error_IT(struct __CAN_HandleTypeDef *hcan) {};

void CAN_Abort(struct __CAN_HandleTypeDef *hcan) {

	hcan1.bits[0] = 0x01;
	hcan1.buf = 0x01;
	hcan1.iterator = 0;
	hcan1.error = 0;
	hcan1.state = 0;
	hcan1.error_state = 0;
	hcan1.msg_state = 0;

	hcan1.stuff_count = 0;
	hcan1.stuff_bit = 0;

	hcan1.Msg.std_mask = 0;
	hcan1.Msg.exd_mask = 0;

	hcan1.itm = 2;
	hcan1.abort = 0;
	hcan1.resetter = 0;
};


__weak void CAN_TxCpltCallback(struct __CAN_HandleTypeDef *hcan) {};
__weak void CAN_RxCpltCallback(struct __CAN_HandleTypeDef *hcan) {};
__weak void CAN_ErrorCallback(struct __CAN_HandleTypeDef *hcan) {};
