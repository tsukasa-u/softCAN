/*
 * CAN_driver.h
 *
 *  Created on: May 2, 2022
 *      Author: tsucasa-u
 *
 *  Document: https://www.analog.com/media/jp/technical-documentation/application-notes/an-1123_jp.pdf
 */

#ifndef INC_CAN_HANDLER_1_H_
#define INC_CAN_HANDLER_1_H_

#define CAN_STANDARD_DATA_FRAME		1 << 0
#define CAN_STANDARD_REMOTE_FRAME	1 << 1
#define CAN_EXTENDED_DATA_FRAME		1 << 2
#define CAN_EXTENDED_REMOTE_FRAME	1 << 3
#define CAN_ERROR_FRAME				1 << 4

#define CRC_15_CAN		0b1100010110011001
#define __CRC_15_CAN	0b100010110011001

#define CAN_EOF_ERROR			8
#define CAN_STUFF_ERROR			7
#define CAN_BIT_ERROR			6
#define CAN_ACK_DELIMITER_ERROR	5
#define CAN_ACK_ERROR			4
#define CAN_CRC_DELIMITER_ERROR	3
#define CAN_CRC_ERROR			2
#define CAN_ARBITRATION_ERROR	1
#define CAN_NO_ERROR			0
#define CAN_NORMAL				0
#define CAN_LISTENING			-1
#define CAN_UNIDENTIFY			-2
#define CAN_ARBITRATION_PASSED	-3

typedef struct
{
  uint32_t TxD;
  uint32_t RxD;
  uint32_t Speed;
}CAN_InitTypeDef;

typedef struct
{
  uint8_t mode;
  uint8_t data[8];
  uint16_t std_id;
  uint16_t exd_id;
  uint8_t dlc;
  uint8_t rtr;
  uint8_t ide;
  uint8_t pb0;
  uint8_t pb1;
  uint8_t srr;
  uint16_t crc;
  uint8_t ack;
}CAN_MsgTypeDef;

typedef struct __CAN_HandleTypeDef
{
  TIM_HandleTypeDef	*Instance;
  CAN_InitTypeDef 	Init;
  CAN_MsgTypeDef	Msg;

//  uint32_t Mode;
  uint32_t data[8];
  uint32_t tp[8];
  uint32_t tp_ite;
  uint32_t bitsBuffer[16];
  uint32_t buf;
  uint8_t ack_count;
  uint8_t error;
  uint8_t state;
  uint8_t error_state;
  uint8_t iterator;
  uint8_t frame;
  uint16_t crc;
  uint8_t stuff_count;
  uint8_t stuff_bit;

#ifdef LOW_MEMORY
  int CAN_switch_value;
#else
  void (*CAN_switch_func_ptr)(__CAN_HandleTypeDef);
#endif

  void (* TxCpltCallback)(struct __CAN_HandleTypeDef *hcan);
  void (* RxCpltCallback)(struct __CAN_HandleTypeDef *hcan);
  void (* ErrorCallback)(struct __CAN_HandleTypeDef *hcan);
  void (* AbortCpltCallback)(struct __CAN_HandleTypeDef *hcan);
  void (* AbortTransmitCpltCallback)(struct __CAN_HandleTypeDef *hcan);
  void (* AbortReceiveCpltCallback)(struct __CAN_HandleTypeDef *hcan);
  void (* WakeupCallback)(struct __CAN_HandleTypeDef *hcan);
  void (* RxEventCallback)(struct __CAN_HandleTypeDef *hcan, uint16_t Pos);
}CAN_HandleTypeDef;

void MX_CAN1_Init(void);

#endif /* INC_CAN_HANDLER_1_H_ */
